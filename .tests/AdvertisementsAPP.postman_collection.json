{
	"info": {
		"_postman_id": "db4e72dc-5eed-49db-ad5f-d8f34349d5c2",
		"name": "AdvertisementsAPP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Category Tests",
			"item": [
				{
					"name": "Category_GetCategories_Returns200WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Categories\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData[0].id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData[0].ordering).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/category",
							"host": [
								"{{url}}"
							],
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category_AddCategory_Returns201WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"category_id\", jsonData.id);\r",
									"pm.test(\"Test POST item to Category\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.ordering).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test\",\r\n    \"ordering\": 999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/category",
							"host": [
								"{{url}}"
							],
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category_AddCategoryWithNotEnoughData_Returns400WithBody Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test POST item to Category with not enough data\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"    pm.expect(jsonData.ordering[0]).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/category",
							"host": [
								"{{url}}"
							],
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category_AddCategoryWithWrongData_Returns400WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test POST item to Category with not wrong data\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"    pm.expect(jsonData.ordering[0]).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wrong\",\r\n    \"ordering\": \"Data\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/category",
							"host": [
								"{{url}}"
							],
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category_EditCategory_Returns200WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test PUT item in Category\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.ordering).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test for PUT\",\r\n    \"ordering\": 999999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/category/{{category_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"category",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category_EditCategoryWithNotEnoughData_Returns400WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test PUT item in Category with not enough data\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"    pm.expect(jsonData.ordering[0]).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test for PUT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/category/{{category_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"category",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category_EditCategoryWithWrongData_Returns400WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test PUT item in Category with not enough data\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"    pm.expect(jsonData.ordering[0]).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wrong\",\r\n    \"ordering\": \"Data\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/category/{{category_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"category",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category_DeleteCategory_Returns204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test DEL Category item\", function () {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/category/{{category_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"category",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category_GetCategoryById_Returns405WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Category item by ID - Method not allowed\", function () {\r",
									"    pm.response.to.have.status(405)\r",
									"    pm.expect(jsonData.detail).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/category/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"category",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category_DeleteCategoryByWrongID_Returns404WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test DELETE Category item by wrong ID\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"    pm.expect(jsonData.detail).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/category/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"category",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Offers Tests",
			"item": [
				{
					"name": "Additional preparation for later tests",
					"item": [
						{
							"name": "Category_AddCategory_Returns201WithBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category_id\", jsonData.id);\r",
											"pm.test(\"Additional test POST Category item 201 status code\", function () {\r",
											"    pm.response.to.have.status(201)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test\",\r\n    \"ordering\": 999\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/category",
									"host": [
										"{{url}}"
									],
									"path": [
										"category"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offer_GetOffers_Returns200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Offers\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData[0].id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].title).to.be.a(\"string\")\r",
									"    pm.expect(jsonData[0].price).to.be.a(\"string\")\r",
									"    pm.expect(jsonData[0].category_id).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_AddOffer_Returns201WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"offer_id\", jsonData.id);\r",
									"pm.test(\"Test POST item to Offer\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.price).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.category_id).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Test\",\r\n    \"price\": 12.34,\r\n    \"category_id\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_AddOfferWithNotEnoughData_Returns400WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test POST item to Offer with not enough data\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"    pm.expect(jsonData.category_id[0]).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Test\",\r\n    \"price\": 12.34\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_AddOfferWithWrongData_Returns400WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test POST item to Offer with not enough data\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"    pm.expect(jsonData.price[0]).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Wrong\",\r\n    \"price\": \"Data\",\r\n    \"category_id\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_GetOfferByID_Returns200WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Offer item by ID\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.price).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.category_id).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/offers/{{offer_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers",
								"{{offer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_GetOfferQueryParameter_Returns200WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Offer items by query parameter\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData[0].id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData[0].title).to.be.a(\"string\")\r",
									"    pm.expect(jsonData[0].price).to.be.a(\"string\")\r",
									"    pm.expect(jsonData[0].category_id).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/offers?category={{category_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers"
							],
							"query": [
								{
									"key": "category",
									"value": "{{category_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_EditOffer_Returns200WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test PUT item in Offer\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"    pm.response.headers[\"Content-Type\"] == \"application/json\"\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.price).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.category_id).to.be.a(\"number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Test for PUT\",\r\n    \"price\": 12.34,\r\n    \"category_id\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/offers/{{offer_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers",
								"{{offer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_AddOfferWithNotEnoughData_Returns400WithBody Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test PUT item in Offer with not enough data\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"    pm.expect(jsonData.category_id[0]).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Test\",\r\n    \"price\": 12.34\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/offers/{{offer_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers",
								"{{offer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_AddOfferWithWrongData_Returns400WithBody Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test PUT item in Offer with not enough data\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"    pm.expect(jsonData.price[0]).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Wrong\",\r\n    \"price\": \"Data\",\r\n    \"category_id\": {{category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/offers/{{offer_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers",
								"{{offer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_DeleteOffer_Returns204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test DEL Offer item\", function () {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/offers/{{offer_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers",
								"{{offer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_GetOfferWithWrongID_Returns404WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test GET Offer item by wrong ID\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"    pm.expect(jsonData.detail).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/offers/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offer_DeleteOfferByWrongID_Returns404WithBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test DELETE Offer item by wrong ID\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"    pm.expect(jsonData.detail).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/offers/{{offer_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"offers",
								"{{offer_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": ""
		},
		{
			"key": "category_id",
			"value": ""
		},
		{
			"key": "offer_id",
			"value": ""
		}
	]
}